Пакети, променливи и функции.
Научете oсновните съставни части на всяка програма на Go.

Авторите на Go
https://golang.org

* Пакети

Всяка програма на Go се състои от пакети.

Програмите започват изпълнението си в пакета `main`.

Тази програма използва пакетите с пътища за внасяне `"fmt"` и `"math/rand"`.

Общоприето е името на пакета да е последният елемент от пътя за внасяне.
Например пакетът `"math/rand"` съдържа файлове, започващи с израза `package`rand`.

*Забележка:* средата, в която се изпълняват програмите е предопределена
(детерминистична), така че винаги, когато изпълнявате примерната програма,
`rand.Intn` ще връща едно и също число.

(За да видите различно число, захранете числовия генератор; вижте [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
(В игрището времето е непроменлива величина, така, че ще трябва да използвате нещо друго за захранване.)

.play basics/packages.go

* Внасяне (Imports)

Тази програма събира внасянията в едно като огражда пътищата в скоби.

Можете да пишете също отделни изрази за внасяне, ето така:

	import "fmt"
	import "math"

Но по-добре е да се използва един израз със скоби.

.play basics/imports.go

* Изнесени (exported) имена

В Go дадено наименование е „изнесено“, когато започва с главна буква.
`Pizza` например е изнесено, както и `Pi`, което е изнесено от пакета `math`.

`pizza` и `pi` не започват с главна буква – не са изнесени.

Когато внасяме пакет, имаме достъп само до изнесените имена от него.
Всяко „неизнесено“ име е недостъпно извън пакета.

Изпълнете кода. Обърнете внимание на съобщението за грешка.

За да оправите грешката, преименувайте `math.pi` на `math.Pi` и опитайте отново.

.play basics/exported-names.go

* Функции

A function can take zero or more arguments.

In this example, `add` takes two parameters of type `int`.

Notice that the type comes _after_ the variable name.

(For more about why types look the way they do, see the [[https://blog.golang.org/gos-declaration-syntax][article on Go's declaration syntax]].)

.play basics/functions.go

* Functions continued

When two or more consecutive named function parameters share a type, you can omit the type from all but the last.

In this example, we shortened

	x int, y int

to

	x, y int

.play basics/functions-continued.go

* Multiple results

A function can return any number of results.

The `swap` function returns two strings.

.play basics/multiple-results.go

* Named return values

Go's return values may be named. If so, they are treated as variables defined at the top of the function.

These names should be used to document the meaning of the return values.

A `return` statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

.play basics/named-results.go

* Variables

The `var` statement declares a list of variables; as in function argument lists, the type is last.

A `var` statement can be at package or function level. We see both in this example.

.play basics/variables.go

* Variables with initializers

A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

.play basics/variables-with-initializers.go

* Short variable declarations

Inside a function, the `:=` short assignment statement can be used in place of a `var` declaration with implicit type.

Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available.

.play basics/short-variable-declarations.go

* Basic types

Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

The example shows variables of several types,
and also that variable declarations may be "factored" into blocks,
as with import statements.

The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use `int` unless you have a specific reason to use a sized or unsigned integer type.

.play basics/basic-types.go

* Zero values

Variables declared without an explicit initial value are given their
_zero_value_.

The zero value is:

- `0` for numeric types,
- `false` for the boolean type, and
- `""` (the empty string) for strings.

.play basics/zero.go

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Or, put more simply:

	i := 42
	f := float64(i)
	u := uint(f)

Unlike in C, in Go assignment between items of different type requires an
explicit conversion.
Try removing the `float64` or `uint` conversions in the example and see what happens.

.play basics/type-conversions.go

* Type inference

When declaring a variable without specifying an explicit type (either by using the `:=` syntax or `var`=` expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

	var i int
	j := i // j is an int

But when the right hand side contains an untyped numeric constant, the new variable may be an `int`, `float64`, or `complex128` depending on the precision of the constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Try changing the initial value of `v` in the example code and observe how its type is affected.

.play basics/type-inference.go

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the `:=` syntax.

.play basics/constants.go

* Numeric Constants

Numeric constants are high-precision _values_.

An untyped constant takes the type needed by its context.

Try printing `needInt(Big)` too.

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
