Едновременно изпълнение
Go предоставя възможност за едновременно изпълнение на код. Тази способност е заложена в ядрото на езика. Следващите уроци обясняват как се постига това и дават някои примери.

The Go Authors
https://golang.org

* Нишки в Go (Goroutines)

_Го-нишката_ представлява лека нишка, управлявана от Go по време на изпълнение.

	go f(x, y, z)

Кодът горе изпълнява функцията `f(x,` `y,` `z)` в отделна нишка.

Оценяването на стойностите на `f`, `x`, `y`, и `z` се случва в текущата нишка, а изпълнението на `f` – в новосъздадената нишка.

Го-нишките се изпълняват в едно и също адресно пространство,
така че споделената памет трябва да се синхронизира (да се уеднакви по време).
Пакетът [[https://golang.org/pkg/sync/][`sync`]] предоставя полезни функции,
макар че няма да ги ползвате много често, тъй като Go предоставя и други.
(Вижте следващата страница)

.play concurrency/goroutines.go

* Канали

Каналите са типизирани тръбопроводи, през които можете да изпращате и получавате
стойности с оператора за канал `<-`.

	ch <- v    // Изпращане на стойност към канала ch.
	v := <-ch  // Получаване на стойност от канала ch
    // и присвояване на стойност на v.

(Данните текат в посоката, указана от стрелката.)

Както речниците и отрязъците, каналите трябва да се създадат преди да се използват:

	ch := make(chan int)

По подразбиране изпращането и получаването на данни спира изпълнението на програмата, докато другата страна е готова.
Това позволява го-нишките да работят в съзвучие без изрични заключвания или променливи за условия.

Примерният код събира числата в отрязъка, като разпределя работата между две го-нишки.
Щом нишките приключат с изчисленията, се пресмята крайния изход.

.play concurrency/channels.go

* Буферирани канали

Каналите могат да бъдат _буферирани_.  Подайте дължината на буфера като втори параметър на `make`, за да създадете буфериран канал:

	ch := make(chan int, 100)

Изпращанията към буферирани канали спират изпълнението на програмата само когато буферът е пълен.
Получаванията спират изпълнението на рограмата само когато буферът е празен.

Променете програмата така че да препълните буфера и вижте какво се случва.

.play concurrency/buffered-channels.go

* Обхват и затваряне

Изпращачът може да затвори (`close`) канала, за да укаже, че няма да бъдат изпращани повече данни.
Получателите могат да проверяват дали каналът е затворен вече, като добавят втори параметър към израза за получаване.

	v, ok := <-ch

`ok`  е `false` ако вече няма стойностти за получаване и каналът е затворен.

Цикълът `for`i`:=`range`c` получава данни от канала при всяко повторение докато каналът бъде затворен.

*Забележка:* Само изпращачът трябва да затваря канала – никога получателят.
Изпращане на данни към затворен канал ще предизвика _паника_ (panic). Програмата ще приключи с грешка.

*Друга*забележка*: Каналите не са като файловете. Обикновено няма нужда да бъдат затваряни.
Затварянето е необходимо само за да се уведоми получателят на данни по канала,
че няма да има повече стойности за получаване. Така получателят ще знае да прекъсне цикъла за обхождане `range`.

.play concurrency/range-and-close.go

* Select

Твърдението `select` позволява на нишката да чака данни от различни канали.

`select` спира програмата докато един от случаите може да бъде изпълнен и го изпълнява.
Ако повече от един от случаите може да бъде изпълнен, се избира един на случаен принцип.

.play concurrency/select.go

* Избор по подразбиране

Случаят `default` (краен случай) в един израз `select` се изпълнява
ако нито един от другите случаи няма данни за получаване.

Използвайте случая `default`, за да изпращате и получавате,
без да спирате изпълнението на програмата (без да я блокирате):

	select {
	case i := <-c:
		// използвате i
	default:
		// получаване на данни от c би блокирало програмата
	}

.play concurrency/default-selection.go

* Упражнение: Еднакви двоични дървета

Могат да съществуват различни двоични дървета с една и съща последователност съхранявана в разклоненията.
Ето например две двоични дървета, които съхраняват последователността 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Да се напише функция, която да проверява дали две дървета съдържат една и съща
последователност е доста сложно в повечето езици. Ще използваме едновременно изпълнение
и каналите в Go, за да напишем просто решение. 

Този пример използва пакета `tree`, в който е обявен този тип:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Описанието продължава на [[javascript:click('.next-page')][следващата страница]].

* Упражнение: Еднакви двоични дървета

*1.* Напишете обхождащата функция `Walk`.

*2.* Тествайте `Walk`.

Функцията `tree.New(k)` създава случайно построено двоично дърво, съдържащо стойностите `k`, `2k`, `3k`, ..., `10k`.

Създайте нов канал `ch` и извикайте обхождащата функция:

	go Walk(tree.New(1), ch)

В нея прочетете и отпечатайте на екрана 10 стойности от канала. Числата трябва да са 1, 2, 3, ..., 10.

*3.* Създайте функцията `Same` (Еднакви) като използвате `Walk` за да определите дали дърветата `t1` и `t2` съдържат еднакви стойности.

*4.* Тествайте функцията `Same`.

`Same(tree.New(1),`tree.New(1))` трябва да върне `true`, a `Same(tree.New(1),`tree.New(2))` трябва да върне `false`.

Документацията за `Tree` се намира [[https://godoc.org/golang.org/x/tour/tree#Tree][тук]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Видяхме, че каналите са чудесен начин за общуване между нишки.

Но ако не е нужно да обменяте данни, какво? Какво ще правим ако просто искаме да се уверим,
че само една нишка може да променя стойността на дадена променлива във всеки един момент
и по този начин да избегнем възможността за сблъсъци.

Това понятие се нарича  _взаимно_изключване_ (_mutual_exclusion_), а името на структурата от данни,
която предоставя тази възможност е _mutex_.

Стандартната библиотека на Go предоставя взаимно изключване чрез пакета
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] и двата му метода:

- `Lock`
- `Unlock`

Можем да определим коя част от програмния код да бъде изпълнена при условията на взаимно изключване
като я оградим с извиквания на методите `Lock` и `Unlock` както е показано в метода `Inc`.

Също така можем да използваме `defer`, за да сме сигурни, че кодът ще бъде отключен в края на функцията,
както се вижда в метода `Value`.

.play concurrency/mutex-counter.go

* Упражнение: Уеб-робот

В това упражнение ще използваме възможностите за едновременно изпълнение на много задачи,
за осъществяването на уеб-робот.

Променете функцията  `Crawl` да изтегля съдържанието на връзките едновременно без да посещава връзките два пъти.

_Съвет_: можете да кеширате адресите, чието съдържание е вече изтеглено, в речник,
но речниците сами по себе си не са надеждни при едновременно използване от няколко нишки!

.play concurrency/exercise-web-crawler.go

* А сега накъде...

#appengine: Можете да започнете с
#appengine: [[https://golang.org/dl/][инсталиране на Go]].

След като сте инсталирали Go, продължете с
[[https://golang.org/doc/][Документацията на Go]].

Тя съдържа справочници, урици, видео-уроци и др.

За да се научите как да работите с програамен код, написан на Go, гледайте [[https://www.youtube.com/watch?v=XCsL89YtqCs][това видео]] или прочете [[https://golang.org/doc/code.html][Как се пише код на Go]].

Ако се нуждаете от помощ за стандартната библиотека, вижте [[https://golang.org/pkg/][package reference]].
Помощ за самия език ще намерите в [[https://golang.org/ref/spec][Спецификацията на езика]].
С изненада ще установите, че е доста четима.

За по задълбочени познания относно многозадачния модел на Go, гледайте
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Concurrency Patterns]]
([[https://talks.golang.org/2012/concurrency.slide][представяне]])
и
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Advanced Go Concurrency Patterns]]
([[https://talks.golang.org/2013/advconc.slide][представяне]]).
Също прочетете разходката из кода
[[https://golang.org/doc/codewalk/sharemem/][Share Memory by Communicating]].

За да започнете да пишете уеб-приложения, изгледайте
[[https://vimeo.com/53221558][Проста среда за програмиране]]
([[https://talks.golang.org/2012/simple.slide][представяне]])
и прочетете урока
[[https://golang.org/doc/articles/wiki/][Писане на уеб-приложения]].

Прегледът на кода [[https://golang.org/doc/codewalk/functions/][Първокалсни функции в Go]]
е интересна гледна точка за типовете на функциите в Go.

[[https://blog.golang.org/][Блогът на Go Blog]] съдържа голям архив с полесни статии.

Посетете [[https://golang.org][golang.org]] за още.

