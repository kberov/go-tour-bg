Изрази за управление: for, if, else, switch and defer
Научете се да управлявате работата на програмата си с условни изрази, цикли, превключвания и отлагания.

The Go Authors
https://golang.org

* For (За)

Go има само един начин за повторение на действия (цикъл). Това е цикълът `for`.

Основният цикъл `for` има три съставни части, разделени с точка и запетая:

- началното твърдение (init statement): изпълнява се преди първото повторение;
- условният израз (condition expression): оценява се преди всяко повторение;
- завършващо твърдение (post statement): изпълнява се в края на всяко повторение.

Началното твърдение често се състои от кратко обявяване на променливи.
Обявените променливи са видими само вътре в цикъла.

Цикълът ще спре щом условният израз бъде оценен като `false`.

_Забележете_: За разлика от други езици като C, Java, или JavaScript около трите съставни части на твърдението `for`, а фигурните скоби `{`}`, ограждащи тялото на цикъла са задължителни.

.play flowcontrol/for.go

* For - продължение

Началното и завършващото твърдения не са задължителни.

.play flowcontrol/for-continued.go

* В Go "for" e "while"

Можете да махнете точките и запетаите: `while` от C e `for` в Go.

.play flowcontrol/for-is-gos-while.go

* Завинаги

Ако пропуснете условието за повторение, то продължава безкрайно,
така че безкрайното повторение е много стегнат израз.

.play flowcontrol/forever.go

* If (ако)

Условните изрази `if` в Go са подобни на повторенията `for`;
няма нужда изразът да се огражда със скоби `(`)`, но фигурните скоби са задължителни `{`}`.

.play flowcontrol/if.go

* If с кратко твърдение

Както `for`, `if` може да започва с кратко твърдение, което да се изпълни преди условието.

Обявените променливи в твърдението са видими само до края на блока `if`.

(Опитайте да използвате `v` в последното `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If и else

Обявените променливи в кратко твърдение на даден блок `if` са видими също във всички `else` блокове, принадлежащи на същия`if` блок.

(И двете извиквания на `pow` се изпълняват и връщат стойност преди извикването на `fmt.Println` в `main` да е започнало.)

.play flowcontrol/if-and-else.go

* Упражнение: Повторения и функции

За да си поиграете с функции и цикли, напишете функция за изчисляване на корен квадратен като използвате метода на Нютон.

Методът на Нютон се състои в това да намерите най-близката стойност на `Sqrt(x)` като изберете начална стойност _z_ и след това изпълнявате изчислението неколкократно:

.image /content/img/newton.png

Подсказка: Повторете и върнете крайната стойност на _z_ като отговор:

	z -= (z*z - x) / (2*z)

Започнете с изпълнение на изчислението 10 пъти и вижте колко близко сте до отговора при различни начални стойности (1, 2, 3, ...).

След това променете условието на повторението да спира когато стойността вече не се променя (или се променя незначително). Проверете дали са ви необходими повече или по-малко от 10 повторения. Колко близко сте до начина, по който е написан [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Подсказка: За да обявите и дадете начална стойност на десетична дроб използвайте съответния тип или превръщайте стойността:

	z := 1.0
	z := float64(1)

.play flowcontrol/exercise-loops-and-functions.go

* Switch (Превключване)

Може би знаехте как изглежда `switch`.

Тялото на случая (case) прекъсва автоматично, освен ако завършва с твърдение `fallthrough`.

.play flowcontrol/switch.go

* Ред на изчисляване в switch

Отделните случаи се изчисляват от горе надолу, като изчислението спира при първият успешен `case`.

(Например,

	switch i {
	case 0:
	case f():
	}

ако `i==0`, не се стига до извикване на функцията `f`.)

#appengine: *Забележка:* Времето в игрището на Go playground винаги изглежда, че започва от
#appengine: 2009-11-10 23:00:00 UTC, стойност, чието значение е оставено като
#appengine: упражнение на читателя.

.play flowcontrol/switch-evaluation-order.go

* Switch без условие

Switch без условие е същото като да напишете `switch`true`.

Този начин на записване е удобен за дълги if-then-else вериги.

.play flowcontrol/switch-with-no-condition.go

* Defer (Отложено извикване)

Твърдението defer отлага изпълнението на функция до момента преди извикващата функция да завърши.

Аргументите на отложената функция се изчисляват незабавно, но самото извикване на функцията се отлага до края на извикващата функция.

.play flowcontrol/defer.go

* Натрупване на отлагания

Отложените извиквания на функции се нареждат на куп. Когато една функция завърши, отложените извиквания се изпълняват в реда последен-влязъл-първи-излязъл (last-in-first-out - LIFO).

За да научите повече за отлагането на извиквания, прочетете 
[[https://blog.golang.org/defer-panic-and-recover][тази статия]].

.play flowcontrol/defer-multi.go

* Поздравления!

Завършихте урока!

Може да се върнете към списъка с [[/list][раздели]] и да изберете с какво да продължите или да продължите със [[javascript:click('.next-page')][следващия урок]].
