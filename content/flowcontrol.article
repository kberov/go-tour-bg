Изрази за управление: for, if, else, switch and defer
Научете се да управлявате работата на програмата си с условни изрази, цикли, превключвания и отлагания.

The Go Authors
https://golang.org

* For (За)

Go има само един начин за повторение на действия (цикъл). Това е цикълът `for`.

Основният цикъл `for` има три съставни части, разделени с точка и запетая:

- началното твърдение (init statement): изпълнява се преди първото повторение;
- условният израз (condition expression): оценява се преди всяко повторение;
- завършващо твърдение (post statement): изпълнява се в края на всяко повторение.

Началното твърдение често се състои от кратко обявяване на променливи.
Обявените променливи са видими само вътре в цикъла.

Цикълът ще спре щом условният израз бъде оценен като `false`.

_Забележете_: За разлика от други езици като C, Java, или JavaScript около трите съставни части на твърдението `for`, а фигурните скоби `{`}`, ограждащи тялото на цикъла са задължителни.

.play flowcontrol/for.go

* For - продължение

Началното и завършващото твърдения не са задължителни.

.play flowcontrol/for-continued.go

* В Go "for" e "while"

Можете да махнете точките и запетаите: `while` от C e `for` в Go.

.play flowcontrol/for-is-gos-while.go

* Завинаги

Ако пропуснете условието за повторение, то продължава безкрайно,
така че безкрайното повторение е много стегнат израз.

.play flowcontrol/forever.go

* If (ако)

Условните изрази `if` в Go са подобни на повторенията `for`;
няма нужда изразът да се огражда със скоби `(`)`, но фигурните скоби са задължителни `{`}`.

.play flowcontrol/if.go

* If с кратко твърдение

Както `for`, `if` може да започва с кратко твърдение, което да се изпълни преди условието.

Обявените променливи в твърдението са видими само до края на блока `if`.

(Опитайте да използвате `v` в последното `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If и else

Обявените променливи в кратко твърдение на даден блок `if` са видими също във всички `else` блокове, принадлежащи на същия`if` блок.

(И двете извиквания на `pow` се изпълняват и връщат стойност преди извикването на `fmt.Println` в `main` да е започнало.)

.play flowcontrol/if-and-else.go

* Упражнение: Повторения и функции

За да си поиграете с функции и цикли, напишете функция за изчисляване на корен квадратен като използвате метода на Нютон.

Методът на Нютон се състои в това да намерите най-близката стойност на `Sqrt(x)` като изберете начална стойност _z_ и след това изпълнявате изчислението неколкократно:

.image /content/img/newton.png

Подсказка: Повторете и върнете крайната стойност на _z_ като отговор:

	z -= (z*z - x) / (2*z)

Започнете с изпълнение на изчислението 10 пъти и вижте колко близко сте до отговора при различни начални стойности (1, 2, 3, ...).

След това променете условието на повторението да спира когато стойността вече не се променя (или се променя незначително). Проверете дали са ви необходими повече или по-малко от 10 повторения. Колко близко сте до начина, по който е написан [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Подсказка: За да обявите и дадете начална стойност на десетична дроб използвайте съответния тип или превръщайте стойността:

	z := 1.0
	z := float64(1)

.play flowcontrol/exercise-loops-and-functions.go

* Switch (Превключване)

Може би знаехте как ще изглежда `switch`.

A case body breaks automatically, unless it ends with a `fallthrough` statement.

.play flowcontrol/switch.go

* Switch evaluation order

Switch cases evaluate cases from top to bottom, stopping when a case succeeds.

(For example,

	switch i {
	case 0:
	case f():
	}

does not call `f` if `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Switch with no condition

Switch without a condition is the same as `switch`true`.

This construct can be a clean way to write long if-then-else chains.

.play flowcontrol/switch-with-no-condition.go

* Defer

A defer statement defers the execution of a function until the surrounding
function returns.

The deferred call's arguments are evaluated immediately, but the function call
is not executed until the surrounding function returns.

.play flowcontrol/defer.go

* Stacking defers

Deferred function calls are pushed onto a stack. When a function returns, its
deferred calls are executed in last-in-first-out order.

To learn more about defer statements read this
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
