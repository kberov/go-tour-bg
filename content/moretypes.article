Още типове: структури (structs), отрязъци (slices), и речници/карти (maps).
Научете се да създавате типове основани на вече съществуващи. В този урок са засегнати:  структури , масиви и речници.

The Go Authors
https://golang.org

* Указатели

Go има указатели.
Указателят съдържа адрес на дадена стойност в паметта.

Типът `*T` е указател към стойност от тип `T`. Нулевата му стойност е `nil`.

	var p *int

Операторът `&` създава указател към подадения му аргумент.

	i := 42
	p = &i

Операторът `*` означава стойността, към която сочи указателят.

	fmt.Println(*p) // прочита се i чрез указателя p
	*p = 21         // задава се i чрез указателя p

Това е познато като „посочване“ или „опосредстване“.


За разлика от C, Go не поддържа аритметика с указатели.

.play moretypes/pointers.go

* Структури (от данни)

Структурата (`struct`) е набор от полета.

.play moretypes/structs.go

* Полета в структурите

Полетата в структурите се достъпват чрез точка.

.play moretypes/struct-fields.go

* Указатели към структури

Полетата в структурите, могат да се достъпят чрез указател към структурата.

За да достъпим стойността на полето `X` в дадена структура от данни чрез указателя `p`,
можем да напишем `(*p).X`.
Но този начин на записване е тежък, така че езикът ни позволява
да пишем просто `p.X`, без изрично посочване.

.play moretypes/struct-pointers.go

* Буквално изписване на структури (Struct Literals)

Буквалното изписване на структура (struct literal) обозначава новосъздадена структура чрез
последователно изписване на стойностите на нейните полета в реда, в който са обявени.

Можете да изпишете само част от стойностите на полетата, като използвате правописа `Name: value`. (Редът на упоменаване на именуваните полета е без значение.)

Представката за тази цел `&` връща указател към стойността на структурата.

.play moretypes/struct-literals.go


* Масиви (подредени списъци от стойности)

Типът `[n]T` е списък от  `n` стойности от типа `T`.

Изразът

	var a [10]int

обявява променлива `a` като списък от десет цели числа.

Дължината на масива е част от типа му, така че масивите не могат да променят дължината си.
Това изглежда ограничаващо, но не се безпокойте.
Go предоставя удобен начин за работа с масиви.

.play moretypes/array.go


* Отрязъци

Масивът е с непроменяема дължина.
Отрязъкът обаче може да променя размера си динамично и
представлява гъвкав изглед върху елементите на масива.
В действителност отрязъците се ползват много повече от масивите.

Типът `[]T` представлява отрязък от тип `T`.

Отрязъкът се образува чрез указването на два индикатора, ниска и висока граница, разделени с двоеточие:

	a[ниска : висока]

Този израз избира полуотворена поредица от елементи от масива,
която включва първия елемент, но изключва последния.

Следният израз създава отрязък, който включва елементите
с индекси от 1 до 3 в масива `a`:

	a[1:4]

.play moretypes/slices.go


* Отрязъците са като връзки (указатели) към масивите

Отрязъкът не съдържа никакви данни, той просто описва част от съответен масив.
Ако промените елементите на един отрязък, променяте съответните елементи в съответния му масив.

Други отрязъци, сочещи към същия масив ще видят тези промени.

.play moretypes/slices-pointers.go


* Буквално изписване на отрязъци

A slice literal is like an array literal without the length.

This is an array literal:

	[3]bool{true, true, false}

And this creates the same array as above,
then builds a slice that references it:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults

When slicing, you may omit the high or low bounds to use their defaults instead.

The default is zero for the low bound and the length of the slice for the high bound.

For the array

	var a [10]int

these slice expressions are equivalent:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Slice length and capacity

A slice has both a _length_ and a _capacity_.

The length of a slice is the number of elements it contains.

The capacity of a slice is the number of elements in the underlying array,
counting from the first element in the slice.

The length and capacity of a slice `s` can be obtained using the expressions
`len(s)` and `cap(s)`.

You can extend a slice's length by re-slicing it,
provided it has sufficient capacity.
Try changing one of the slice operations in the example program to extend it
beyond its capacity and see what happens.

.play moretypes/slice-len-cap.go


* Nil slices

The zero value of a slice is `nil`.

A nil slice has a length and capacity of 0
and has no underlying array.

.play moretypes/nil-slices.go


* Creating a slice with make

Slices can be created with the built-in `make` function;
this is how you create dynamically-sized arrays.

The `make` function allocates a zeroed array
and returns a slice that refers to that array:

	a := make([]int, 5)  // len(a)=5

To specify a capacity, pass a third argument to `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices of slices

Slices can contain any type, including other slices.

.play moretypes/slices-of-slice.go


* Appending to a slice

It is common to append new elements to a slice, and so Go provides a built-in
`append` function. The [[https://golang.org/pkg/builtin/#append][documentation]]
of the built-in package describes `append`.

	func append(s []T, vs ...T) []T

The first parameter `s` of `append` is a slice of type `T`, and the rest are
`T` values to append to the slice.

The resulting value of `append` is a slice containing all the elements of the
original slice plus the provided values.

If the backing array of `s` is too small to fit all the given values a bigger
array will be allocated. The returned slice will point to the newly allocated
array.

(To learn more about slices, read the [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]] article.)

.play moretypes/append.go


* Range

The `range` form of the `for` loop iterates over a slice or map.

When ranging over a slice, two values are returned for each iteration.
The first is the index, and the second is a copy of the element at that index.

.play moretypes/range.go

* Range continued

You can skip the index or value by assigning to `_`.

If you only want the index, drop the ", value" entirely.

.play moretypes/range-continued.go

* Exercise: Slices

Implement `Pic`. It should return a slice of length `dy`, each element of which is a slice of `dx` 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values.

The choice of image is up to you. Interesting functions include `(x+y)/2`, `x*y`, and `x^y`.

(You need to use a loop to allocate each `[]uint8` inside the `[][]uint8`.)

(Use `uint8(intValue)` to convert between types.)

.play moretypes/exercise-slices.go

* Maps

A map maps keys to values.

The zero value of a map is `nil`.
A `nil` map has no keys, nor can keys be added.

The `make` function returns a map of the given type,
initialized and ready for use.

.play moretypes/maps.go

* Map literals

Map literals are like struct literals, but the keys are required.

.play moretypes/map-literals.go

* Map literals continued

If the top-level type is just a type name, you can omit it from the elements of the literal.

.play moretypes/map-literals-continued.go

* Mutating Maps

Insert or update an element in map `m`:

	m[key] = elem

Retrieve an element:

	elem = m[key]

Delete an element:

	delete(m, key)

Test that a key is present with a two-value assignment:

	elem, ok = m[key]

If `key` is in `m`, `ok` is `true`. If not, `ok` is `false`.

If `key` is not in the map, then `elem` is the zero value for the map's element type.

_Note_: if `elem` or `ok` have not yet been declared you could use a short declaration form:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercise: Maps

Implement `WordCount`.  It should return a map of the counts of each “word” in the string `s`. The `wc.Test` function runs a test suite against the provided function and prints success or failure.

You might find [[https://golang.org/pkg/strings/#Fields][strings.Fields]] helpful.

.play moretypes/exercise-maps.go

* Function values

Functions are values too. They can be passed around just like other values.

Function values may be used as function arguments and return values.

.play moretypes/function-values.go

* Function closures

Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is "bound" to the variables.

For example, the `adder` function returns a closure. Each closure is bound to its own `sum` variable.

.play moretypes/function-closures.go

* Exercise: Fibonacci closure

Let's have some fun with functions.

Implement a `fibonacci` function that returns a function (a closure) that
returns successive [[https://en.wikipedia.org/wiki/Fibonacci_number][fibonacci numbers]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
