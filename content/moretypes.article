Още типове: структури (structs), отрязъци (slices), и речници/карти (maps).
Научете се да създавате типове основани на вече съществуващи. В този урок са засегнати:  структури , масиви и речници.

The Go Authors
https://golang.org

* Указатели

Go има указатели.
Указателят съдържа адрес на дадена стойност в паметта.

Типът `*T` е указател към стойност от тип `T`. Нулевата му стойност е `nil`.

	var p *int

Операторът `&` създава указател към подадения му аргумент.

	i := 42
	p = &i

Операторът `*` означава стойността, към която сочи указателят.

	fmt.Println(*p) // прочита се i чрез указателя p
	*p = 21         // задава се i чрез указателя p

Това е познато като „посочване“ или „опосредстване“.


За разлика от C, Go не поддържа аритметика с указатели.

.play moretypes/pointers.go

* Структури (от данни)

Структурата (`struct`) е набор от полета.

.play moretypes/structs.go

* Полета в структурите

Полетата в структурите се достъпват чрез точка.

.play moretypes/struct-fields.go

* Указатели към структури

Полетата в структурите, могат да се достъпят чрез указател към структурата.

За да достъпим стойността на полето `X` в дадена структура от данни чрез указателя `p`,
можем да напишем `(*p).X`.
Но този начин на записване е тежък, така че езикът ни позволява
да пишем просто `p.X`, без изрично посочване.

.play moretypes/struct-pointers.go

* Буквално изписване на структури (Struct Literals)

Буквалното изписване на структура (struct literal) обозначава новосъздадена структура чрез
последователно изписване на стойностите на нейните полета в реда, в който са обявени.

Можете да изпишете само част от стойностите на полетата, като използвате правописа `Name: value`. (Редът на упоменаване на именуваните полета е без значение.)

Представката за тази цел `&` връща указател към стойността на структурата.

.play moretypes/struct-literals.go


* Масиви (подредени списъци от стойности)

Типът `[n]T` е списък от  `n` стойности от типа `T`.

Изразът

	var a [10]int

обявява променлива `a` като списък от десет цели числа.

Дължината на масива е част от типа му, така че масивите не могат да променят дължината си.
Това прилича на ограничение, но не се безпокойте.
Go предоставя удобен начин за работа с масиви.

.play moretypes/array.go


* Отрязъци

Масивът е с непроменяема дължина.
Отрязъкът обаче може да променя размера си свободно и
представлява гъвкав изглед върху стойностите на масива.
В действителност отрязъците се ползват много повече от масивите.

Типът `[]T` представлява отрязък от тип `T`.

Отрязъкът се образува чрез указването на два индикатора, ниска и висока граница, разделени с двоеточие:

	a[ниска : висока]

Този израз избира полуотворена поредица от стойностите от масива,
която включва първата стойност, но изключва последната.

Следният израз създава отрязък, който включва стойностите
с индекси от 1 до 3 в масива `a`:

	a[1:4]

.play moretypes/slices.go


* Отрязъците са като връзки (указатели) към масивите

Отрязъкът не съдържа никакви данни, той просто описва част от съответен масив.
Ако промените стойностите на един отрязък, променяте стойностите в съответния му масив.

Други отрязъци, сочещи към същия масив ще видят тези промени.

.play moretypes/slices-pointers.go


* Буквално изписване на отрязъци

Буквалното изписване на отрязъци е същото както при масивите, но без дължината.

Така се изписва буквално масив:

	[3]bool{true, true, false}

А така се създава същия масив, но чрез отрязък, който сочи към него:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Стойности по подразбиране при отрязъците

Когато създавате отрязъци, можете да пропуснете долната или горната
граница и да ползвате подразбиращите се стойности.

Долната граница по подразбиране е нула, а горната е дължината на отрязъка.

За масива

	var a [10]int

следните изрази за създаване на отрязък правят едно и също:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Дължина и вместимост на отрязъците

Отрязъкът има свойствата _дължина_ и _вместимост_.

Дължината е броят на стойностите, които съдържа отрязъкът.

Вместимостта е броят на стойностите в съответстващия масив, като се брои от първата стойност на отрязъка.

Дължината и вместимостта на отрязъка `s` могат да бъдат получени с изразите
`len(s)` и `cap(s)`.

Можете да удължите отрязък като го отрежете отново, в случай че има достатъчно вместимост.
Опитайте да промените някое от действията, извършвани върху отрязъците
в примерната програма, за да удължите отрязъка,
като не се съобразявате с вместимостта му и вижте какво се случва.

.play moretypes/slice-len-cap.go


* Нулеви отрязъци (Nil slices)

Нулевата стойност на отрязък е `nil`.

Нулевият отрязък има дължина и вместимост 0,
и няма съответстващ масив.

.play moretypes/nil-slices.go


* Създаване на отрязък с `make`

Отрязъци могат да се създават с вградената в езика функция `make`.
Това е начинът за създаване на свободно преоразмеряващи се масиви.

Функцията `make` създава нулиран масив и връща отрязък, който сочи към този масив:

	a := make([]int, 5)  // len(a)=5

За да укажете вместимост, подайте трети параметър на `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Отрязъци от отрязъци

Отрязъците могат да съдържат всякакъв тип данни, включително други отрязъци.

.play moretypes/slices-of-slice.go


* Добавяне към отрязък

Добавянето на нови стойности към отрязъци е често срещано действие и Go
предоставя вградена функция `append`. [[https://golang.org/pkg/builtin/#append][Документацията]]
на пакета `builtin` описва `append`.

	func append(s []T, vs ...T) []T

Първият параметър на `append` `s`  е отрязък от тип `T`, а останалите
са стойности отново от типа `T`, които ще се добавят към отрязъка.

`append` връща нов отрязък, съдържащ всички стойности на първоначалния отрязък и новодобавените стойности.

Ако съответстващият на `s` масив е твърде малък, за да побере всички подадени стойности,
се заделя нов масив. Върнатият отрязък ще сочи към новозаделения масив.

(За да научите повече за отрязъците, прочетете статията [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go


* Обход (range)

`range` се използва с цикъла `for` за обхождане на отрязъци или речници.

Когато се обхожда отрязък, за всяка единица на отрязъка се връщат две стойности.
Първата е индексът (местоположението), а втората – копие на стойността, намираща се на това място.

.play moretypes/range.go

* Обход (продължение)

Можете да пропуснете индекса или стойността, като присвоите изхода от повторението на `_`.

Ако искате само индекса, можете да не пишете стойността изобщо.

.play moretypes/range-continued.go

* Упражнение: Отрязъци

Допишете функцията `Pic`. Тя трябва да връща отрязък с дължина `dy`,
като всяка единица от него представлява отрязък, съдържащ `dx` 8-битови цели числа без знак.
Като пуснете програмата, тя ще покаже картинка, която използва числата
като стойности за степени на сивото (е, на синьото).

Полученото изображение зависи от вас. Интересни картинки се получават при стойности `(x+y)/2`, `x*y` и `x^y`.

(Използвайте цикъл, за да създадете за всеки елемент отрязък от тип `[]uint8` в `[][]uint8` отрязъка.)

(Използвайте `uint8(intValue)`, за да превърнете стойността в необходимия тип.)

.play moretypes/exercise-slices.go

* Речници/Карти (Maps)

Речникът обвързва ключове със стойности.

Нулевата стойност за речник е `nil`.
Речник със стойност `nil` няма ключове, нито пък могат да бъдат добавени.

С функцията `make` можете да създавате речник от подадения тип, който е готов за използване.

.play moretypes/maps.go

* Буквално изписване на речници

Речниците се изписват буквално както структурите, но ключовете са задължителни.

.play moretypes/map-literals.go

* Буквално изписване на речници (2)

Ако основния тип за стойностите е просто име на тип, може да не го изписвате изрично за всяка стойност

.play moretypes/map-literals-continued.go

* Променяне на речници

Вмъкване или променяне на стойност в речник `m`:

	m[key] = elem

Извличане на стойност:

	elem = m[key]

Изтриване на стойност:

	delete(m, key)

Проверка дали даден ключ съществува, чрез двойно присвояване:

	elem, ok = m[key]

Ако `key` съществува в `m`, `ok` е `true`. Ако ли не, `ok` е `false`.

Ако `key` не е в речника, тогава на `elem` ще се присвои
нулевата стойност за съответния тип на стойността в речника.

_Забележка_: ако `elem` или `ok` не са обявени, можете да използвате кратко обявяване:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Упражнение: Речници

Допишете функцията `WordCount`. Тя трябва да връща речник, 
съдържащ броя намерени повторения на всяка „дума“  в низа  `s`.
Функцията `wc.Test` изпълнява тестове върху предоставената функция отпечатва изход за успех или грешка.

[[https://golang.org/pkg/strings/#Fields][strings.Fields]] ще ви свърши добра работа.

.play moretypes/exercise-maps.go

* Функции като стойности

Функциите са и стойности. Те могат да бъдат използвани като всяка друга стойност.

Могат да се подават като аргументи на други функции и да бъдат връщани като стойност.

.play moretypes/function-values.go

* функции затваряния

Функциите в Go могат да бъдат и _затваряния_. Затварянето е стойност на функция,
която се обръща към променлива от своята обкръжаваща среда. Функцията може да чете
и да присвоява стойности на променливи, обявени извън нейното тяло.
(Така тя ги „затваря" в себе си. бел. прев.) В този смисъл можем да кажем,
че функцията е обвързана с променливите.

Например функцията `adder` връща затваряне. Всяко затваряне е обвързано със собствената си променлива `sum`.

.play moretypes/function-closures.go

* Упражнение:Затваряне Фибоначи

Да се позабавляваме с функциите.

Създайте функция `fibonacci`, която връща функция (затваряне), което пък последователно връща
returns successive [[https://en.wikipedia.org/wiki/Fibonacci_number][числа от поредицата на Фибоначи]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Поздравления!

Завършихте този урок!

Може да се върнете към списъка с [[/list][раздели]] и да изберете с какво да продължите или да продължите със [[javascript:click('.next-page')][следващия урок]].
